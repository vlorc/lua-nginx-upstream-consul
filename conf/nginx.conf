master_process off;
daemon off;
error_log  logs/error.log notice;

env APP_ENV;
env APP_CLUSTER;
env KUBERNETES_SERVICE_HOST;
env KUBERNETES_SERVICE_PORT;
env KUBERNETES_APISERVER_TOKEN;

events {
    worker_connections 1024;
}

http {

	lua_package_path "D:/runtime/openresty/lualib/?.lua;D:/Project/Lua/upsteams/?.lua;D:/Project/Lua/upstreams/lua_modules/share/lua/5.1/?.lua;;";
	lua_package_cpath "D:/runtime/openresty/lualib/?.so;;";
    lua_socket_log_errors on;

    lua_shared_dict lreu_upstream     2m;

    lua_max_pending_timers 1024;
    lua_max_running_timers 1024;

    init_worker_by_lua_block {
       local upstreams = require "upstreams"
       local handle = nil

       handle = function ()
           upstreams:refresh()
           ngx.timer.at(5, handle)
       end
       ngx.timer.at(1, handle);
    }

	upstream dynamic-upstream {
	    server 127.0.0.1:2222;
	    balancer_by_lua_block {
	        local upstreams = require "upstreams"
	        upstreams.rr();
		}

	    keepalive 30;
	}

	server {
		listen 80 default_server;
		server_name *.example.com;

		location / {
            proxy_pass http://dynamic-upstream;
		}
	}

	server {
		listen 127.0.0.1:2222 default_server;
		server_name _;

		location / {
			return 502 "No available upstream.";
		}
	}
}
